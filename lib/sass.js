"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const s = require("node-sass");
const dopees_chain_1 = require("dopees-chain");
const fs = require("fs");
const fspath = require("path");
const fsp = fs.promises;
// const fileStat = (path: string): Promise<fs.Stats> => new Promise((resolve, reject) => fs.stat(path, (err, stats) => err ? reject(err) : resolve(stats)));
const fileExists = (path) => fsp.access(path).then(() => true, () => false);
const sassRender = (options) => new Promise((resolve, reject) => s.render(options, (err, result) => {
    if (err) {
        reject(err);
    }
    else {
        resolve(result);
    }
}));
const resolveDependency = async (rootPath, path, includePaths) => {
    let folder;
    let fname;
    if (path.includes(fspath.sep)) {
        folder = fspath.dirname(path);
        fname = fspath.basename(path);
    }
    else {
        folder = '';
        fname = path;
    }
    if (!fname.endsWith('.scss')) {
        fname = fname + '.scss';
    }
    for (const basePath of includePaths) {
        let candidate = fspath.normalize(fspath.join(basePath, folder, fname));
        if (await fileExists(candidate)) {
            return candidate;
        }
        if (!fname.startsWith('_')) {
            candidate = fspath.normalize(fspath.join(basePath, folder, '_' + fname));
            if (await fileExists(candidate)) {
                return candidate;
            }
        }
    }
    throw new Error(`could not resolve ${path} while processing ${rootPath}, search paths: ${includePaths}`);
};
const getMatches = (regex, input) => {
    const result = [];
    for (let m = regex.exec(input); m; m = regex.exec(input)) {
        result.push(m);
    }
    return result;
};
class SassMapperState {
    constructor(options) {
        this.sourceResolver = dopees_chain_1.ReversePathResolver.from(options);
        this.innerStateKey = 'sass.innerState';
        const extension = `.${options.targetExt || 'css'}`;
        this.selector = (path, context) => {
            const absoluteTargetRoot = fspath.normalize(fspath.join(context.basePath, options.targetRoot));
            return path.endsWith(extension) && dopees_chain_1.PathResolver.match(path, absoluteTargetRoot, options.subfolders);
        };
        this.outputStyle = options.outputStyle;
        this.precision = options.precision;
        this.production = true === options.production;
    }
}
exports.SassMapperState = SassMapperState;
class SassMapper extends dopees_chain_1.derived.FileMapper {
    constructor() {
        super(...arguments);
        this.name = 'sass';
    }
    async generate(state, task, innerState, _) {
        const options = {
            outputStyle: state.outputStyle || 'compressed',
            precision: state.precision,
            file: innerState.sourcePath,
            data: innerState.sourceCode,
            outFile: task.name.path,
            sourceMap: !state.production,
            sourceMapEmbed: !state.production
        };
        const sassResult = await sassRender(options);
        return sassResult.css;
    }
    async readSource(_, task, context) {
        const code = await context.getContents(task, 'utf-8');
        return {
            sourceCode: code,
            sourcePath: task.name.path
        };
    }
    init(options) { return new SassMapperState(options); }
}
exports.SassMapper = SassMapper;
class SassDependencyResolver extends dopees_chain_1.derived.FileDependencyResolver {
    constructor() {
        super(...arguments);
        this.name = 'sass:deps';
    }
    async readSource(_, task, context) {
        const code = await context.getContents(task, 'utf-8');
        return {
            sourceCode: code,
            sourcePath: task.name.path
        };
    }
    async readDependencies(_, task, innerState, context) {
        const folder = fspath.dirname(innerState.sourcePath);
        return await Promise.all(getMatches(/^@import '(.*)';?$/mg, innerState.sourceCode)
            .map(m => m[1])
            .map(relative => resolveDependency(folder, relative, [folder]))); // FIXME: includePaths
    }
    init(options) {
        const extension = `.${options.sourceExt || 'scss'}`;
        return {
            selector: (path) => path.endsWith(extension),
            dependenciesKey: 'sass.dependencies',
            innerStateKey: 'sass.innerState'
        };
    }
}
exports.SassDependencyResolver = SassDependencyResolver;
function sass(options) {
    if (!options) {
        throw new Error('targetRoot must be specified');
    }
    // FIXME: propagate
    // const includePaths = opts.includePaths || [];
    const sassExecutor = new SassMapper().createExecutor(options);
    const sassDepsExecutor = new SassDependencyResolver().createExecutor(options);
    return dopees_chain_1.Executors.combine(sassExecutor, sassDepsExecutor);
}
exports.sass = sass;
//# sourceMappingURL=data:application/json;base64,